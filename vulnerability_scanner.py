# vulnerability_scanner.py

import ssl
import socket
import struct
from OpenSSL import SSL
import nmap
import os


class SSLScanner:
    """
    Classe principale pour scanner les vulnérabilités SSL/TLS.
    """

    def __init__(self, hostname, port=443):
        """
        Initialise le scanner avec un nom d'hôte et un port.
        """
        self.hostname = hostname
        self.port = port
        self.result = None
        self.vulnerabilities = []

    def analyze_ssl_tls(self):
        """
        Analyse la configuration SSL/TLS de l'hôte cible.
        """
        context = SSL.Context(SSL.SSLv23_METHOD)
        sock = socket.create_connection((self.hostname, self.port))
        connection = SSL.Connection(context, sock)
        connection.set_tlsext_host_name(self.hostname.encode())
        connection.set_connect_state()
        connection.do_handshake()

        cert = connection.get_peer_certificate()
        cipher = connection.get_cipher_name()
        protocol = connection.get_protocol_version_name()

        self.result = {
            "hostname": self.hostname,
            "port": self.port,
            "certificate": cert.get_subject().CN,
            "issuer": cert.get_issuer().CN,
            "version": cert.get_version(),
            "cipher": cipher,
            "protocol": protocol
        }

    def check_vulnerabilities(self):
        """
        Vérifie les vulnérabilités SSL/TLS connues.
        """
        if self.result["protocol"] in ["SSLv2", "SSLv3"]:
            self.vulnerabilities.append("Protocole obsolète détecté")

        weak_ciphers = ["RC4", "DES", "MD5"]
        if any(cipher in self.result["cipher"] for cipher in weak_ciphers):
            self.vulnerabilities.append("Suite de chiffrement faible détectée")

        if self.check_heartbleed():
            self.vulnerabilities.append("Vulnérabilité Heartbleed détectée")

        if self.check_poodle():
            self.vulnerabilities.append("Vulnérabilité POODLE détectée")

    def check_heartbleed(self):
        """
        Vérifie la présence de la vulnérabilité Heartbleed.
        """
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE

        try:
            with socket.create_connection((self.hostname, self.port)) as sock:
                with context.wrap_socket(sock, server_hostname=self.hostname) as ssock:
                    hb = b'\x18\x03\x02\x00\x03\x01\x40\x00'
                    ssock.send(hb)
                    data = ssock.recv(1024)
                    return len(data) > 3
        except Exception:
            return False

    def check_poodle(self):
        """
        Vérifie la présence de la vulnérabilité POODLE.
        """
        context = SSL.Context(SSL.SSLv23_METHOD)
        context.set_options(SSL.OP_NO_SSLv2 | SSL.OP_NO_TLSv1)

        try:
            s = socket.create_connection((self.hostname, self.port))
            connection = SSL.Connection(context, s)
            connection.set_tlsext_host_name(self.hostname.encode())
            connection.set_connect_state()
            connection.do_handshake()
            return True
        except SSL.Error:
            return False
        finally:
            connection.close()

    def generate_report(self):
        """
        Génère un rapport détaillé des résultats du scan.
        """
        report = f"""
SSL/TLS Vulnerability Scan Report
---------------------------------
Target: {self.result['hostname']}:{self.result['port']}
Certificate: {self.result['certificate']}
Issuer: {self.result['issuer']}
Protocol: {self.result['protocol']}
Cipher Suite: {self.result['cipher']}

Vulnerabilities:
{chr(10).join('- ' + v for v in self.vulnerabilities) if self.vulnerabilities else "Aucune vulnérabilité détectée"}

Recommendations:
- Mettez à jour vers la dernière version de TLS
- Utilisez des suites de chiffrement fortes
- Désactivez les protocoles obsolètes
- Appliquez les correctifs de sécurité pour Heartbleed et POODLE si détectés
"""
        return report

    def scan_ports(self):
        """
        Scanne les ports ouverts sur l'hôte cible.
        """
        nm = nmap.PortScanner()
        nm.scan(self.hostname, arguments='-p- --open')
        open_ports = []
        for host in nm.all_hosts():
            for proto in nm[host].all_protocols():
                lport = nm[host][proto].keys()
                for port in lport:
                    open_ports.append(f"{port}/{proto}")
        return open_ports

    def run(self):
        """
        Exécute le scan complet et affiche les résultats.
        """
        print(f"Analyse de {self.hostname}:{self.port}...")

        try:
            self.analyze_ssl_tls()
            self.check_vulnerabilities()
            report = self.generate_report()
            print(report)

            print("Scan des ports ouverts...")
            open_ports = self.scan_ports()
            print("Ports ouverts :")
            for port in open_ports:
                print(f"- {port}")

        except Exception as e:
            print(f"Une erreur s'est produite : {e}")


def main():
    """
    Fonction principale qui initialise et exécute le scanner.
    """
    hostname = os.environ.get('HOSTNAME', 'example.com')
    port = int(os.environ.get('PORT', 443))

    scanner = SSLScanner(hostname, port)
    scanner.run()


if __name__ == "__main__":
    main()
